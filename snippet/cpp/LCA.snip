snippet LCA


  struct LCA{
    const int MAX_LOG_V = 50;

    vector<vector<int> > G,parent;
    int root=0,V;
    vector<int> depth;
    LCA(){}
    LCA(int V):V(V){init();}
    LCA(int V,WG<int> es):V(V){init();rep(i,V){for(auto e:es[i]){G[i].PB(e.to);}}}

    void init(){
      for(int i=0;i<(int)G.size();i++) G[i].clear();
      G.clear();
      for(int i=0;i<(int)parent.size();i++) parent[i].clear();
      parent.clear();
      depth.clear();
      G.resize(V);
      parent.resize(MAX_LOG_V,vector<int>(V));
      depth.resize(V);
    }

    void add(int u,int v){
      G[u].PB(v);
    }

    void dfs(int v,int p,int d){
      parent[0][v]=p;
      depth[v]=d;
      for(int i=0;i<(int)G[v].size();i++){
        if(G[v][i]!=p) dfs(G[v][i],v,d+1);
      }
    }

    void construct(){
      dfs(root,-1,0);
      for(int k=0;k+1<MAX_LOG_V;k++){
        for(int v=0;v<V;v++){
          if(parent[k][v]<0) parent[k+1][v]=-1;
          else parent[k+1][v]=parent[k][parent[k][v]];
        }
      }
    }

    int lca(int u,int v){
      if(depth[u]>depth[v]) swap(u,v);
      for(int k=0;k<MAX_LOG_V;k++){
        if((depth[v]-depth[u])>>k&1){
          v=parent[k][v];
        }
      }
      if(u==v) return u;
      for(int k=MAX_LOG_V-1;k>=0;k--){
        if(parent[k][u]!=parent[k][v]){
          u=parent[k][u];
          v=parent[k][v];
        }
      }
      return parent[0][u];
    }
  };


