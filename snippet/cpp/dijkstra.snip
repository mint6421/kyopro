snippet dijkstra


  template< typename T >
  vector<T> dijkstra(WG<T> &g,int s){
    const auto lim = numeric_limits<T>::max();
    vector<T> dist(g.size(),lim);
    using Pi = pair<T,int>;
    priority_queue<Pi,vector<Pi>,greater<Pi>> q;
    dist[s] = 0;
    q.emplace(dist[s],s);
    while(!q.empty()){
      T cost;
      int idx;
      tie(cost,idx) = q.top();
      q.pop();
      if(dist[idx] < cost) continue;
      for( auto &e : g[idx]){
        auto next_cost = cost + e.cost;
        if(dist[e.to] <= next_cost) continue;
        dist[e.to] = next_cost;
        q.emplace(dist[e.to],e.to);
      }
    }
    return dist;
  }


