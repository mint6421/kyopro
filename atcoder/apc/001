
#include<bits/stdc++.h>
using namespace std;
#define inf INT_MAX
#define INF LLONG_MAX
#define ll long long
#define ull unsigned long long
#define M (int)(1e9+7)
#define P pair<int,int>
#define PLL pair<ll,ll>
#define FOR(i,m,n) for(int i=(int)m;i<(int)n;i++)
#define RFOR(i,m,n) for(int i=(int)m;i>=(int)n;i--)
#define rep(i,n) FOR(i,0,n)
#define rrep(i,n) RFOR(i,n,0)
#define all(a) a.begin(),a.end()
#define IN(a,n) rep(i,n){ cin>>a[i]; }
const int vx[4] = {0,1,0,-1};
const int vy[4] = {1,0,-1,0};
#define PI 3.14159265
#define F first
#define S second
#define PB push_back
#define EB emplace_back
#define int ll
#define vi vector<int>
#define IP pair<int,P>
#define PP pair<P,P>



struct UnionFind
{

  vector<int> par;
  vector<int> sizes;

  UnionFind(int n) : par(n), sizes(n, 1) {
    rep(i,n) par[i] = i;
  }

  int root(int x) {
    if (x == par[x]) return x;
    return par[x] = root(par[x]); 
  }

  bool unite(int x, int y) {

    x = root(x);
    y = root(y);

    if (x == y) return false;

    if (sizes[x] < sizes[y]) swap(x, y);

    par[y] = x;
    sizes[x] += sizes[y];

    return true;
  }

  bool find(int x,int y){
    return root(x)==root(y);
  }

  int size(int x) {
    return sizes[root(x)];
  }
};

signed main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  cout<<fixed<<setprecision(20);

  int n,m;
  cin>>n>>m;
  vi a(n);
  rep(i,n){
    cin>>a[i];
  }
  UnionFind uf(n);
  rep(i,m){
    int x,y;
    cin>>x>>y;
    uf.unite(x,y);
  }

  if(n==m+1){
    cout<<0<<endl;
    return 0;
  }


  map<int,int> mp;
  rep(i,n){
    int x=uf.root(i);
    if(mp.find(x)==mp.end()){
      mp[x]=i;
    }else if(a[mp[x]]>a[i]){
      mp[x]=i;
    }
  }

  int ans=0;
  for(P m:mp){
    //cout<<"   "<<m.S<<' '<<a[m.S]<<endl;
    ans+=a[m.S];
  }

  priority_queue<int,vi,greater<int>> q;
  rep(i,n){
    //cout<<i<<' '<<mp[i]<<endl;
    if(mp[uf.root(i)]!=i){
      //cout<<i<<endl;
      q.push(a[i]);
    }
  }

 

  rep(i,n-m-2){
    //cout<<q.top()<<endl;
    if(q.empty()){
      cout<<"Impossible"<<endl;
      return 0;
    }
    ans+=q.top();
    q.pop();
  }

  cout<<ans<<endl;



}
